#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db_QuestionBank")]
	public partial class questionBankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTbl_Exam(Tbl_Exam instance);
    partial void UpdateTbl_Exam(Tbl_Exam instance);
    partial void DeleteTbl_Exam(Tbl_Exam instance);
    partial void InsertTbl_User(Tbl_User instance);
    partial void UpdateTbl_User(Tbl_User instance);
    partial void DeleteTbl_User(Tbl_User instance);
    partial void InsertTbl_ExamDetali(Tbl_ExamDetali instance);
    partial void UpdateTbl_ExamDetali(Tbl_ExamDetali instance);
    partial void DeleteTbl_ExamDetali(Tbl_ExamDetali instance);
    partial void InsertTbl_Lession(Tbl_Lession instance);
    partial void UpdateTbl_Lession(Tbl_Lession instance);
    partial void DeleteTbl_Lession(Tbl_Lession instance);
    partial void InsertTbl_Log(Tbl_Log instance);
    partial void UpdateTbl_Log(Tbl_Log instance);
    partial void DeleteTbl_Log(Tbl_Log instance);
    partial void InsertTbl_QuestionDetail(Tbl_QuestionDetail instance);
    partial void UpdateTbl_QuestionDetail(Tbl_QuestionDetail instance);
    partial void DeleteTbl_QuestionDetail(Tbl_QuestionDetail instance);
    partial void InsertTbl_Question(Tbl_Question instance);
    partial void UpdateTbl_Question(Tbl_Question instance);
    partial void DeleteTbl_Question(Tbl_Question instance);
    partial void InsertTbl_TestQuestion(Tbl_TestQuestion instance);
    partial void UpdateTbl_TestQuestion(Tbl_TestQuestion instance);
    partial void DeleteTbl_TestQuestion(Tbl_TestQuestion instance);
    #endregion
		
		public questionBankDataContext() : 
				base(global::DAL.Properties.Settings.Default.db_QuestionBankConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public questionBankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public questionBankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public questionBankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public questionBankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tbl_Exam> Tbl_Exams
		{
			get
			{
				return this.GetTable<Tbl_Exam>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_User> Tbl_Users
		{
			get
			{
				return this.GetTable<Tbl_User>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_ExamDetali> Tbl_ExamDetalis
		{
			get
			{
				return this.GetTable<Tbl_ExamDetali>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_Lession> Tbl_Lessions
		{
			get
			{
				return this.GetTable<Tbl_Lession>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_Log> Tbl_Logs
		{
			get
			{
				return this.GetTable<Tbl_Log>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_QuestionDetail> Tbl_QuestionDetails
		{
			get
			{
				return this.GetTable<Tbl_QuestionDetail>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_Question> Tbl_Questions
		{
			get
			{
				return this.GetTable<Tbl_Question>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_TestQuestion> Tbl_TestQuestions
		{
			get
			{
				return this.GetTable<Tbl_TestQuestion>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_Exam")]
	public partial class Tbl_Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateTimeCreateExam;
		
		private string _Grade;
		
		private int _lessionID;
		
		private int _LogID;
		
		private EntitySet<Tbl_ExamDetali> _Tbl_ExamDetalis;
		
		private EntityRef<Tbl_Lession> _Tbl_Lession;
		
		private EntityRef<Tbl_Log> _Tbl_Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateTimeCreateExamChanging(System.DateTime value);
    partial void OnDateTimeCreateExamChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnlessionIDChanging(int value);
    partial void OnlessionIDChanged();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    #endregion
		
		public Tbl_Exam()
		{
			this._Tbl_ExamDetalis = new EntitySet<Tbl_ExamDetali>(new Action<Tbl_ExamDetali>(this.attach_Tbl_ExamDetalis), new Action<Tbl_ExamDetali>(this.detach_Tbl_ExamDetalis));
			this._Tbl_Lession = default(EntityRef<Tbl_Lession>);
			this._Tbl_Log = default(EntityRef<Tbl_Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreateExam", DbType="DateTime NOT NULL")]
		public System.DateTime DateTimeCreateExam
		{
			get
			{
				return this._DateTimeCreateExam;
			}
			set
			{
				if ((this._DateTimeCreateExam != value))
				{
					this.OnDateTimeCreateExamChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreateExam = value;
					this.SendPropertyChanged("DateTimeCreateExam");
					this.OnDateTimeCreateExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lessionID", DbType="Int NOT NULL")]
		public int lessionID
		{
			get
			{
				return this._lessionID;
			}
			set
			{
				if ((this._lessionID != value))
				{
					if (this._Tbl_Lession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlessionIDChanging(value);
					this.SendPropertyChanging();
					this._lessionID = value;
					this.SendPropertyChanged("lessionID");
					this.OnlessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="Int NOT NULL")]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					if (this._Tbl_Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Exam_Tbl_ExamDetali", Storage="_Tbl_ExamDetalis", ThisKey="ID", OtherKey="ExamID")]
		public EntitySet<Tbl_ExamDetali> Tbl_ExamDetalis
		{
			get
			{
				return this._Tbl_ExamDetalis;
			}
			set
			{
				this._Tbl_ExamDetalis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Lession_Tbl_Exam", Storage="_Tbl_Lession", ThisKey="lessionID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Lession Tbl_Lession
		{
			get
			{
				return this._Tbl_Lession.Entity;
			}
			set
			{
				Tbl_Lession previousValue = this._Tbl_Lession.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Lession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Lession.Entity = null;
						previousValue.Tbl_Exams.Remove(this);
					}
					this._Tbl_Lession.Entity = value;
					if ((value != null))
					{
						value.Tbl_Exams.Add(this);
						this._lessionID = value.ID;
					}
					else
					{
						this._lessionID = default(int);
					}
					this.SendPropertyChanged("Tbl_Lession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Log_Tbl_Exam", Storage="_Tbl_Log", ThisKey="LogID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Log Tbl_Log
		{
			get
			{
				return this._Tbl_Log.Entity;
			}
			set
			{
				Tbl_Log previousValue = this._Tbl_Log.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Log.Entity = null;
						previousValue.Tbl_Exams.Remove(this);
					}
					this._Tbl_Log.Entity = value;
					if ((value != null))
					{
						value.Tbl_Exams.Add(this);
						this._LogID = value.ID;
					}
					else
					{
						this._LogID = default(int);
					}
					this.SendPropertyChanged("Tbl_Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_ExamDetalis(Tbl_ExamDetali entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Exam = this;
		}
		
		private void detach_Tbl_ExamDetalis(Tbl_ExamDetali entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_User")]
	public partial class Tbl_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _PhoneNumber;
		
		private string _Permission;
		
		private int _LessionId;
		
		private EntitySet<Tbl_Log> _Tbl_Logs;
		
		private EntityRef<Tbl_Lession> _Tbl_Lession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPermissionChanging(string value);
    partial void OnPermissionChanged();
    partial void OnLessionIdChanging(int value);
    partial void OnLessionIdChanged();
    #endregion
		
		public Tbl_User()
		{
			this._Tbl_Logs = new EntitySet<Tbl_Log>(new Action<Tbl_Log>(this.attach_Tbl_Logs), new Action<Tbl_Log>(this.detach_Tbl_Logs));
			this._Tbl_Lession = default(EntityRef<Tbl_Lession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessionId", DbType="Int NOT NULL")]
		public int LessionId
		{
			get
			{
				return this._LessionId;
			}
			set
			{
				if ((this._LessionId != value))
				{
					if (this._Tbl_Lession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessionIdChanging(value);
					this.SendPropertyChanging();
					this._LessionId = value;
					this.SendPropertyChanged("LessionId");
					this.OnLessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_User_Tbl_Log", Storage="_Tbl_Logs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Tbl_Log> Tbl_Logs
		{
			get
			{
				return this._Tbl_Logs;
			}
			set
			{
				this._Tbl_Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Lession_Tbl_User", Storage="_Tbl_Lession", ThisKey="LessionId", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Lession Tbl_Lession
		{
			get
			{
				return this._Tbl_Lession.Entity;
			}
			set
			{
				Tbl_Lession previousValue = this._Tbl_Lession.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Lession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Lession.Entity = null;
						previousValue.Tbl_Users.Remove(this);
					}
					this._Tbl_Lession.Entity = value;
					if ((value != null))
					{
						value.Tbl_Users.Add(this);
						this._LessionId = value.ID;
					}
					else
					{
						this._LessionId = default(int);
					}
					this.SendPropertyChanged("Tbl_Lession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_Logs(Tbl_Log entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_User = this;
		}
		
		private void detach_Tbl_Logs(Tbl_Log entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_ExamDetalis")]
	public partial class Tbl_ExamDetali : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ExamID;
		
		private int _QuestionID;
		
		private double _Score;
		
		private EntityRef<Tbl_Exam> _Tbl_Exam;
		
		private EntityRef<Tbl_Question> _Tbl_Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExamIDChanging(int value);
    partial void OnExamIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnScoreChanging(double value);
    partial void OnScoreChanged();
    #endregion
		
		public Tbl_ExamDetali()
		{
			this._Tbl_Exam = default(EntityRef<Tbl_Exam>);
			this._Tbl_Question = default(EntityRef<Tbl_Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamID", DbType="Int NOT NULL")]
		public int ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					if (this._Tbl_Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Tbl_Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Float NOT NULL")]
		public double Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Exam_Tbl_ExamDetali", Storage="_Tbl_Exam", ThisKey="ExamID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Exam Tbl_Exam
		{
			get
			{
				return this._Tbl_Exam.Entity;
			}
			set
			{
				Tbl_Exam previousValue = this._Tbl_Exam.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Exam.Entity = null;
						previousValue.Tbl_ExamDetalis.Remove(this);
					}
					this._Tbl_Exam.Entity = value;
					if ((value != null))
					{
						value.Tbl_ExamDetalis.Add(this);
						this._ExamID = value.ID;
					}
					else
					{
						this._ExamID = default(int);
					}
					this.SendPropertyChanged("Tbl_Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Question_Tbl_ExamDetali", Storage="_Tbl_Question", ThisKey="QuestionID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Question Tbl_Question
		{
			get
			{
				return this._Tbl_Question.Entity;
			}
			set
			{
				Tbl_Question previousValue = this._Tbl_Question.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Question.Entity = null;
						previousValue.Tbl_ExamDetalis.Remove(this);
					}
					this._Tbl_Question.Entity = value;
					if ((value != null))
					{
						value.Tbl_ExamDetalis.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Tbl_Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_Lession")]
	public partial class Tbl_Lession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Tbl_Exam> _Tbl_Exams;
		
		private EntitySet<Tbl_User> _Tbl_Users;
		
		private EntitySet<Tbl_Question> _Tbl_Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tbl_Lession()
		{
			this._Tbl_Exams = new EntitySet<Tbl_Exam>(new Action<Tbl_Exam>(this.attach_Tbl_Exams), new Action<Tbl_Exam>(this.detach_Tbl_Exams));
			this._Tbl_Users = new EntitySet<Tbl_User>(new Action<Tbl_User>(this.attach_Tbl_Users), new Action<Tbl_User>(this.detach_Tbl_Users));
			this._Tbl_Questions = new EntitySet<Tbl_Question>(new Action<Tbl_Question>(this.attach_Tbl_Questions), new Action<Tbl_Question>(this.detach_Tbl_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Lession_Tbl_Exam", Storage="_Tbl_Exams", ThisKey="ID", OtherKey="lessionID")]
		public EntitySet<Tbl_Exam> Tbl_Exams
		{
			get
			{
				return this._Tbl_Exams;
			}
			set
			{
				this._Tbl_Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Lession_Tbl_User", Storage="_Tbl_Users", ThisKey="ID", OtherKey="LessionId")]
		public EntitySet<Tbl_User> Tbl_Users
		{
			get
			{
				return this._Tbl_Users;
			}
			set
			{
				this._Tbl_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Lession_Tbl_Question", Storage="_Tbl_Questions", ThisKey="ID", OtherKey="lessionID")]
		public EntitySet<Tbl_Question> Tbl_Questions
		{
			get
			{
				return this._Tbl_Questions;
			}
			set
			{
				this._Tbl_Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_Exams(Tbl_Exam entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Lession = this;
		}
		
		private void detach_Tbl_Exams(Tbl_Exam entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Lession = null;
		}
		
		private void attach_Tbl_Users(Tbl_User entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Lession = this;
		}
		
		private void detach_Tbl_Users(Tbl_User entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Lession = null;
		}
		
		private void attach_Tbl_Questions(Tbl_Question entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Lession = this;
		}
		
		private void detach_Tbl_Questions(Tbl_Question entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Lession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_Log")]
	public partial class Tbl_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _DateTimeLogin;
		
		private EntitySet<Tbl_Exam> _Tbl_Exams;
		
		private EntityRef<Tbl_User> _Tbl_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateTimeLoginChanging(System.DateTime value);
    partial void OnDateTimeLoginChanged();
    #endregion
		
		public Tbl_Log()
		{
			this._Tbl_Exams = new EntitySet<Tbl_Exam>(new Action<Tbl_Exam>(this.attach_Tbl_Exams), new Action<Tbl_Exam>(this.detach_Tbl_Exams));
			this._Tbl_User = default(EntityRef<Tbl_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Tbl_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeLogin", DbType="DateTime NOT NULL")]
		public System.DateTime DateTimeLogin
		{
			get
			{
				return this._DateTimeLogin;
			}
			set
			{
				if ((this._DateTimeLogin != value))
				{
					this.OnDateTimeLoginChanging(value);
					this.SendPropertyChanging();
					this._DateTimeLogin = value;
					this.SendPropertyChanged("DateTimeLogin");
					this.OnDateTimeLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Log_Tbl_Exam", Storage="_Tbl_Exams", ThisKey="ID", OtherKey="LogID")]
		public EntitySet<Tbl_Exam> Tbl_Exams
		{
			get
			{
				return this._Tbl_Exams;
			}
			set
			{
				this._Tbl_Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_User_Tbl_Log", Storage="_Tbl_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_User Tbl_User
		{
			get
			{
				return this._Tbl_User.Entity;
			}
			set
			{
				Tbl_User previousValue = this._Tbl_User.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_User.Entity = null;
						previousValue.Tbl_Logs.Remove(this);
					}
					this._Tbl_User.Entity = value;
					if ((value != null))
					{
						value.Tbl_Logs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Tbl_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_Exams(Tbl_Exam entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Log = this;
		}
		
		private void detach_Tbl_Exams(Tbl_Exam entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Log = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_QuestionDetails")]
	public partial class Tbl_QuestionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDQuestions;
		
		private string _text;
		
		private EntitySet<Tbl_TestQuestion> _Tbl_TestQuestions;
		
		private EntityRef<Tbl_Question> _Tbl_Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDQuestionsChanging(int value);
    partial void OnIDQuestionsChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public Tbl_QuestionDetail()
		{
			this._Tbl_TestQuestions = new EntitySet<Tbl_TestQuestion>(new Action<Tbl_TestQuestion>(this.attach_Tbl_TestQuestions), new Action<Tbl_TestQuestion>(this.detach_Tbl_TestQuestions));
			this._Tbl_Question = default(EntityRef<Tbl_Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDQuestions", DbType="Int NOT NULL")]
		public int IDQuestions
		{
			get
			{
				return this._IDQuestions;
			}
			set
			{
				if ((this._IDQuestions != value))
				{
					if (this._Tbl_Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDQuestionsChanging(value);
					this.SendPropertyChanging();
					this._IDQuestions = value;
					this.SendPropertyChanged("IDQuestions");
					this.OnIDQuestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_QuestionDetail_Tbl_TestQuestion", Storage="_Tbl_TestQuestions", ThisKey="ID", OtherKey="QuestionDetailsID")]
		public EntitySet<Tbl_TestQuestion> Tbl_TestQuestions
		{
			get
			{
				return this._Tbl_TestQuestions;
			}
			set
			{
				this._Tbl_TestQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Question_Tbl_QuestionDetail", Storage="_Tbl_Question", ThisKey="IDQuestions", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Question Tbl_Question
		{
			get
			{
				return this._Tbl_Question.Entity;
			}
			set
			{
				Tbl_Question previousValue = this._Tbl_Question.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Question.Entity = null;
						previousValue.Tbl_QuestionDetails.Remove(this);
					}
					this._Tbl_Question.Entity = value;
					if ((value != null))
					{
						value.Tbl_QuestionDetails.Add(this);
						this._IDQuestions = value.ID;
					}
					else
					{
						this._IDQuestions = default(int);
					}
					this.SendPropertyChanged("Tbl_Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_TestQuestions(Tbl_TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_QuestionDetail = this;
		}
		
		private void detach_Tbl_TestQuestions(Tbl_TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_QuestionDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_Questions")]
	public partial class Tbl_Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _QuestionText;
		
		private string _DifficultyLevel;
		
		private string _QuestionType;
		
		private string _Session;
		
		private string _Grade;
		
		private int _lessionID;
		
		private EntitySet<Tbl_ExamDetali> _Tbl_ExamDetalis;
		
		private EntitySet<Tbl_QuestionDetail> _Tbl_QuestionDetails;
		
		private EntityRef<Tbl_Lession> _Tbl_Lession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnDifficultyLevelChanging(string value);
    partial void OnDifficultyLevelChanged();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    partial void OnSessionChanging(string value);
    partial void OnSessionChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnlessionIDChanging(int value);
    partial void OnlessionIDChanged();
    #endregion
		
		public Tbl_Question()
		{
			this._Tbl_ExamDetalis = new EntitySet<Tbl_ExamDetali>(new Action<Tbl_ExamDetali>(this.attach_Tbl_ExamDetalis), new Action<Tbl_ExamDetali>(this.detach_Tbl_ExamDetalis));
			this._Tbl_QuestionDetails = new EntitySet<Tbl_QuestionDetail>(new Action<Tbl_QuestionDetail>(this.attach_Tbl_QuestionDetails), new Action<Tbl_QuestionDetail>(this.detach_Tbl_QuestionDetails));
			this._Tbl_Lession = default(EntityRef<Tbl_Lession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifficultyLevel", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string DifficultyLevel
		{
			get
			{
				return this._DifficultyLevel;
			}
			set
			{
				if ((this._DifficultyLevel != value))
				{
					this.OnDifficultyLevelChanging(value);
					this.SendPropertyChanging();
					this._DifficultyLevel = value;
					this.SendPropertyChanged("DifficultyLevel");
					this.OnDifficultyLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Session", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				if ((this._Session != value))
				{
					this.OnSessionChanging(value);
					this.SendPropertyChanging();
					this._Session = value;
					this.SendPropertyChanged("Session");
					this.OnSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lessionID", DbType="Int NOT NULL")]
		public int lessionID
		{
			get
			{
				return this._lessionID;
			}
			set
			{
				if ((this._lessionID != value))
				{
					if (this._Tbl_Lession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlessionIDChanging(value);
					this.SendPropertyChanging();
					this._lessionID = value;
					this.SendPropertyChanged("lessionID");
					this.OnlessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Question_Tbl_ExamDetali", Storage="_Tbl_ExamDetalis", ThisKey="ID", OtherKey="QuestionID")]
		public EntitySet<Tbl_ExamDetali> Tbl_ExamDetalis
		{
			get
			{
				return this._Tbl_ExamDetalis;
			}
			set
			{
				this._Tbl_ExamDetalis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Question_Tbl_QuestionDetail", Storage="_Tbl_QuestionDetails", ThisKey="ID", OtherKey="IDQuestions")]
		public EntitySet<Tbl_QuestionDetail> Tbl_QuestionDetails
		{
			get
			{
				return this._Tbl_QuestionDetails;
			}
			set
			{
				this._Tbl_QuestionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_Lession_Tbl_Question", Storage="_Tbl_Lession", ThisKey="lessionID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_Lession Tbl_Lession
		{
			get
			{
				return this._Tbl_Lession.Entity;
			}
			set
			{
				Tbl_Lession previousValue = this._Tbl_Lession.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Lession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Lession.Entity = null;
						previousValue.Tbl_Questions.Remove(this);
					}
					this._Tbl_Lession.Entity = value;
					if ((value != null))
					{
						value.Tbl_Questions.Add(this);
						this._lessionID = value.ID;
					}
					else
					{
						this._lessionID = default(int);
					}
					this.SendPropertyChanged("Tbl_Lession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_ExamDetalis(Tbl_ExamDetali entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Question = this;
		}
		
		private void detach_Tbl_ExamDetalis(Tbl_ExamDetali entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Question = null;
		}
		
		private void attach_Tbl_QuestionDetails(Tbl_QuestionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Question = this;
		}
		
		private void detach_Tbl_QuestionDetails(Tbl_QuestionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_TestQuestion")]
	public partial class Tbl_TestQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _QuestionDetailsID;
		
		private string _Text;
		
		private int _Priority;
		
		private EntityRef<Tbl_QuestionDetail> _Tbl_QuestionDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionDetailsIDChanging(int value);
    partial void OnQuestionDetailsIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public Tbl_TestQuestion()
		{
			this._Tbl_QuestionDetail = default(EntityRef<Tbl_QuestionDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDetailsID", DbType="Int NOT NULL")]
		public int QuestionDetailsID
		{
			get
			{
				return this._QuestionDetailsID;
			}
			set
			{
				if ((this._QuestionDetailsID != value))
				{
					if (this._Tbl_QuestionDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionDetailsID = value;
					this.SendPropertyChanged("QuestionDetailsID");
					this.OnQuestionDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_QuestionDetail_Tbl_TestQuestion", Storage="_Tbl_QuestionDetail", ThisKey="QuestionDetailsID", OtherKey="ID", IsForeignKey=true)]
		public Tbl_QuestionDetail Tbl_QuestionDetail
		{
			get
			{
				return this._Tbl_QuestionDetail.Entity;
			}
			set
			{
				Tbl_QuestionDetail previousValue = this._Tbl_QuestionDetail.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_QuestionDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_QuestionDetail.Entity = null;
						previousValue.Tbl_TestQuestions.Remove(this);
					}
					this._Tbl_QuestionDetail.Entity = value;
					if ((value != null))
					{
						value.Tbl_TestQuestions.Add(this);
						this._QuestionDetailsID = value.ID;
					}
					else
					{
						this._QuestionDetailsID = default(int);
					}
					this.SendPropertyChanged("Tbl_QuestionDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
